'use strict'
//! локальная регистрация компонента
let TabDrinks = {
  template: `<div>
  <h2>Содержимое вкладки {{title}}</h2>
 </div>`,
  // любой родительский компонент может передать данные в дочерний компонент 
  // для получения дочерним элементом данных мы используем свойство props 
  props: ['title'], // от родителям прейдут данные и через props мы их получаем и выводим в компоненте дочернем 
  // все что в props это атрибуты 
  // тип данных в props может быть любой 
  //! мы обязаны передать значение свойства title в html :title="currentTab.name"
}
let TabDeserts = {
  template: `<div>
  <h2>Содержимое вкладки {{title}}</h2>
 </div>`,
  props: { title: String } // если нужно конкретизировать тип данных, то props задаём как объект и указываем тип данных //! мы обязаны передать значение свойства title в html :title="currentTab.name"
}
let TabSalads = {
  template: `<div>
  <h2>Содержимое вкладки {{title}}</h2>
 </div>`,
  props: { //! установить значение свойства title в html :title="currentTab.name" по умолчанию в том случае если не буду переданы 
    title: {
      return: false,
      default: "Вкладка", // если значение в title не передадут то значение по умолчанию будет Вкладка
      validator(titleValue) { // когда значение title передаётся то оно передаётся в validator в виде аргумента
        //! validator возвращает true или false, если true то значение передано верно, а если false то сообщение с ошибкой будет в console.log
        // разработчики которые занимаются разработкой компонентами, прописывают валидацию для корректного последующего использования последующим пользователям 
        return titleValue.length > 3;
      }
    }
  }
}
let app = Vue.createApp({ // корневой компонент 
  //  template: ``, // весь код корневого компонентам описывают в template во избежания проблем рендеринга
  // если html задан через template то Vue приходиться каждый раз парсить и искать там директивы, что созывается на производительности 
  // render() { // правильно задавать шаблон компонента template через функцию render() инструкциями vue 

  //},
  data() {
    return {
      tabs: [
        { name: "Напитки", en: "drinks" },
        { name: "Десерты", en: "deserts" },
        { name: "Салаты", en: "salads" },
      ],
      currentTab: { name: "Напитки", en: "drinks" }
    }
  },
  // локальная регистрация компонентов
  components: { TabDrinks, TabDeserts, TabSalads },

  computed: {// объект с вычисляемыми свойствами 
    tabName() {
      return `tab-${this.currentTab.en}`; // динамическое изменение имени тега 
    }
  },
})
// родительские компоненты могут передать данные дочерним 
// каждую вкладку разобьём на отдельный компонент 

//! глобальная регистрация компонента 
// app.component('tab-drinks', { // в название не может быть пробелов и чёрточек, если не будет имени то мы не сможем его использовать в других компонентах, если компонент зарегистрирован глобально то он будет доступен всем компонентам приложения 
//   template: `<div>
//   <h2>Содержимое вкладки напитки</h2>
//   </div>`  //template это html 
// })
// // 
// app.component('tab-deserts', {
//   template: `<div>
//   <h2>Содержимое вкладки десерты</h2>
//   </div>`  //template это html 
// }) // первым аргументам передаём имя компонента, а вторым аргументом объект который описывает этот компонент 
// app.component('tab-salads', { // в этом объекте мы описываем data, вычисляемые методы и свойства которые относятся к данному компоненту 
//   template: `<div>
//   <h2>Содержимое вкладки салаты</h2>
//   </div>`  //template это html 
// }) // 


app.mount("#app") 