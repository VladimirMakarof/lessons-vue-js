'use strict'
Vue.createApp( // основной компонент и передаём в него объект с настройками .. Vue.createApp возвращает объект vue и сразу у него вызываем метод mount
  {
    data() { // метод data возрастит объект за которыми будет следить vue 
      return {
        companies: [
          { id: 1, name: 'Custom Line' },
          { id: 2, name: 'Riva' },
          { id: 3, name: 'Ferretti' },
        ],
        formData: {
          name: '',
          email: '',
          phone: '',
          companies: [1], // поскольку у нас стоит multiple то значения сохраняться как массив из значений :value="company.id" .. в случае если нам нужно указать значение по умолчанию то указываем его индекс в массиве
          price: 10000,
          count: 1,
          comment: '',
          contacts: ['call'], // значение по умолчанию 
          agree: true,
        }
      }
    },
    methods: {
      addRequest(event) { // event это объект который приходит в обработчик 
        console.log(this.formData); // ! что делает обработчик
        event.target.reset();
      }
    },
  }
).mount("#app") // Метод mount в Vue.js просто связывает экземпляр Vue с элементом в DOM и запускает его, чтобы приложение начало работать. Когда вы вызываете метод mount на экземпляре Vue, он ищет указанный вами элемент в DOM и начинает реактивно обновлять его содержимое, если происходят изменения в данных. Это делает метод mount важной частью жизненного цикла Vue-приложения.